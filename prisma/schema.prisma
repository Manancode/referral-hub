generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String        @id @default(cuid())
  email             String        @unique
  name              String?
  password          String
  stripeCustomerId  String?       @unique
  subscriptionTier  SubscriptionTier @default(FREE)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  subscription      Subscription[]
  projects          Project[]
  searches          Search[]
  searchUsage       SearchUsage?
  searchJob         SearchJob[] 
  searchQueue        SearchQueue[]
  userProfile      UserProfile[]
}

model UserProfile {
  id               String   @id @default(cuid())
  username         String
  potentialFounder Boolean
  relevanceScore   Float
  userId           String
  user             User     @relation(fields: [userId], references: [id])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}


model Subscription {
  id                    String   @id @default(cuid())
  stripeSubscriptionId  String   @unique
  interval              String
  status                String
  planId                String
  currentPeriodStart    DateTime
  currentPeriodEnd      DateTime
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id])
  userId                String   
}

model Project {
  id          String    @id @default(cuid())
  name        String
  description String?
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  searches    Search[]
}

model Search {
  id         String         @id @default(cuid())
  keywords   String[]
  subreddits String[]
  projectId  String
  project    Project        @relation(fields: [projectId], references: [id])
  userId     String
  user       User           @relation(fields: [userId], references: [id])
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  userresults UserResult[]
  results    SearchResult[]
  status     String?        // Add this field
  jobId      String?        // Add this field
  productIdea String?       // Add this field
}

model SearchResult {
  id             String   @id @default(cuid())
  username       String
  postTitle      String
  postContent    String
  subreddit      String
  relevanceScore Float
  contacted      Boolean  @default(false)
  searchId       String
  search         Search   @relation(fields: [searchId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  isDeleted      Boolean  @default(false)
}

model SearchJob {
  id        String   @id @default(cuid())
  userId    String 
  user      User     @relation(fields: [userId], references: [id])
  status    String
  progress  Int      @default(0)
  result    Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SearchQueue {
  id              String   @id @default(cuid())
  userId          String   
  productIdea     String
  keywords        String[]
  tier            SubscriptionTier
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id])
}


model SearchUsage {
  id                String   @id @default(cuid())
  userId            String   @unique 
  user              User     @relation(fields: [userId], references: [id])
  searchesPerformed Int      @default(0)
  lastSearchDate    DateTime @default(now()) // Added lastSearchDate field
  lastResetDate     DateTime @default(now())
}


model UserResult {
  id        String   @id @default(cuid())
  username  String
  search    Search   @relation(fields: [searchId], references: [id])
  searchId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
}

enum SubscriptionTier {
  FREE
  BASIC
  PREMIUM
}
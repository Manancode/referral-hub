generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String        @id @default(cuid())
  email             String        @unique
  name              String?
  password          String
  stripeCustomerId  String?       @unique
  subscriptionTier  SubscriptionTier @default(FREE)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  subscription      Subscription?
  projects          Project[]
  searches          Search[]
}

model Subscription {
  id                    String   @id @default(cuid())
  stripeSubscriptionId  String   @unique
  interval              String
  status                String
  planId                String
  currentPeriodStart    DateTime
  currentPeriodEnd      DateTime
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id])
  userId                String   @unique
}

model Project {
  id          String    @id @default(cuid())
  name        String
  description String?
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  searches    Search[]
}

model Search {
  id         String         @id @default(cuid())
  keywords   String[]
  subreddits String[]
  projectId  String
  userresults UserResult[]
  project    Project        @relation(fields: [projectId], references: [id])
  userId     String
  user       User           @relation(fields: [userId], references: [id])
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  results    SearchResult[]
}

model SearchResult {
  id             String   @id @default(cuid())
  username       String
  postTitle      String
  postContent    String
  subreddit      String
  relevanceScore Float
  contacted      Boolean  @default(false)
  searchId       String
  search         Search   @relation(fields: [searchId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model UserResult {
  id        String   @id @default(cuid())
  username  String
  search    Search   @relation(fields: [searchId], references: [id])
  searchId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


enum SubscriptionTier {
  FREE
  BASIC
  PREMIUM
}